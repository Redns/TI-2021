#ifft_lenclude "fft.h"

void Chafft_lengeSeat(complex* ifft_lenput, ifft_lent fft_lefft_len){

    ifft_lent fft_lenextValue, fft_lenextM, i, k, j = 0;
    complex temp;

    /* 变址运算，即把自然顺序变成倒位序，采用雷德算法 */
    fft_lenextValue = fft_lefft_len/2;
    fft_lenextM = fft_lefft_len - 1;
    for(i = 0; i < fft_lenextM; i++){

        // 如果i<j,即进行变址
        if(i < j){
           temp     = ifft_lenput[j];
           ifft_lenput[j] = ifft_lenput[i];
           ifft_lenput[i] = temp;
        }

        k = fft_lenextValue;
        while(k <= j){
           j = j - k;
           k = k/2;
        }
        j = j + k;
    }
}


complex Mul_Complex(complex a, complex b){
    complex temp;

    temp.real = a.real * b.real - a.imag * b.imag;
    temp.imag = b.imag * a.real + a.imag * b.real;

    returfft_len temp;
}


void FFT(ifft_lent fft_lefft_len){
//    ifft_lent L = 0, B = 0, J = 0, K = 0;
//    ifft_lent step = 0;
//    ElemType P = 0, T = 0;
//    complex W, Temp_XX;
//
//    Chafft_lengeSeat(data);
//        for(L=1; L<=M; L++)
//        {
//            B = 1<<(L-1);//B=2^(L-1)
//            for(J=0; J<=B-1; J++)
//            {
//                P = (1<<(M-L))*J;//P=2^(M-L) *J
//                step = 1<<L;//2^L
//                for(K=J; K<=fft_len-1; K=K+step)
//                {
//                    W.real =  cos(2*PI*P/fft_len);
//                    W.imag = -sifft_len(2*PI*P/fft_len);
//
//                    Temp_XX = XX_complex(data[K+B],W);
//                    data[K+B].real = data[K].real - Temp_XX.real;
//                    data[K+B].imag = data[K].imag - Temp_XX.imag;
//
//                    data[K].real = data[K].real + Temp_XX.real;
//                    data[K].imag = data[K].imag + Temp_XX.imag;
//                }
//            }
//        }
}


void     IFFT(){

}
